=========================
MessageBus 도메인 테스트
=========================

TestMessageBus
--------------

핸들러 등록 테스트 (TestHandlerRegistration)
"""""""""""""""""""""""""""""""""""""""""""""

핸들러 등록 (test_register_handler)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
:시나리오:
    * 핸들러를 특정 메시지 타입에 등록

:검증 항목:
    * 핸들러가 성공적으로 등록됨

핸들러 중복 등록 방지 (test_prevent_duplicate_handler_registration)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
:시나리오:
    * 동일한 메시지 타입에 동일한 핸들러를 두 번 등록 시도

:검증 항목:
    * DuplicateHandlerError 예외 발생
    * "핸들러가 이미 등록되었습니다" 메시지 포함

메시지 발행 테스트 (TestMessagePublishing)
"""""""""""""""""""""""""""""""""""""""""""

유효한 메시지 발행 (test_publish_valid_message)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
:시나리오:
    * 등록된 메시지를 발행하여 핸들러 호출 확인

:검증 항목:
    * 핸들러의 handle 메서드가 호출됨
    * 메시지가 올바르게 처리됨

등록되지 않은 메시지 발행 (test_publish_unregistered_message)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
:시나리오:
    * 핸들러가 등록되지 않은 메시지 타입 발행 시도

:검증 항목:
    * HandlerNotFoundError 예외 발생
    * "등록된 핸들러가 없습니다" 메시지 포함

이벤트 큐 관리 테스트 (TestEventQueue)
"""""""""""""""""""""""""""""""""""""""

이벤트 큐에 이벤트 추가 (test_add_event_to_queue)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
:시나리오:
    * 메시지 발행 후 이벤트가 이벤트 큐에 추가되는지 확인

:검증 항목:
    * 이벤트가 event_queue에 추가됨

이벤트 큐에서 이벤트 처리 (test_process_event_queue)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
:시나리오:
    * 이벤트 큐에 있는 이벤트를 처리

:검증 항목:
    * 모든 이벤트가 처리됨
    * 이벤트 큐가 비어 있음

테스트 설계 원칙
----------------

책임 분리
^^^^^^^^
* 등록: 핸들러 등록 및 중복 방지
* 발행: 메시지 발행 및 핸들러 호출
* 이벤트: 이벤트 큐 관리 및 처리

테스트 격리
^^^^^^^^^
* Mock 객체를 통한 독립적 테스트 데이터 생성
* 각 테스트는 독립적으로 실행 가능

테스트 가독성
^^^^^^^^^^^
* Given-When-Then 패턴 사용
* 명확한 시나리오 문서화
* 검증 항목 명시 