.. _core_concepts:

핵심 개념
=========

본 문서는 진행 중인 프로젝트에 적용할 이벤트 기반 아키텍처(EDA)의 핵심 개념을 정리한 내부 참고 문서이다.
각 개념에 대한 정의와 구현 시 고려할 사항을 아래와 같이 기술한다.

Event Sourcing
--------------
Event Sourcing은 시스템의 상태 변경을 이벤트 형태로 기록하는 패턴이다.
이를 통해 모든 상태 변경 이력을 보존하여 감사, 문제 분석, 시스템 복구 등의 용도로 활용할 수 있다.
예를 들어, 사용자가 요구사항을 생성할 경우, 
CreateRequirementCommand를 처리한 후 RequirementCreatedEvent를 발행하고,
해당 이벤트들을 재생함으로써 현재 상태를 재구성할 수 있다.

CQRS (Command Query Responsibility Segregation)
-------------------------------------------------
CQRS는 명령(쓰기)과 조회(읽기)를 분리하여 각각 독립적으로 처리하는 패턴이다.
이를 통해 다음과 같은 이점을 얻을 수 있다:

- 쓰기와 조회 작업을 별도로 최적화 및 확장할 수 있다.
- 도메인 로직과 데이터 조회 로직의 분리를 통해 유지보수와 테스트의 효율성이 향상된다.

예를 들어, 프로젝트 생성 시 CreateProjectCommand를 사용하여 쓰기 모델에 데이터를 저장하고,
조회 시에는 별도의 쿼리를 통해 읽기 전용 모델에서 데이터를 검색하는 방식으로 구현할 수 있다.

Eventual Consistency
--------------------
Eventual Consistency는 비동기 처리를 통해 일정 시간이 경과하면 데이터 일관성이 보장되는 모델이다.
이 모델에서는 쓰기 작업 후 조회 모델이 일정 지연을 두고 업데이트되며, 
최종적으로 모든 구성 요소가 일관된 상태를 유지하도록 설계한다.
예를 들어, 요구사항 생성 후 발행된 이벤트에 따라 조회 모델이 업데이트되는 과정에서
일시적인 불일치가 발생할 수 있으나, 최종적으로 전체 시스템은 일관된 데이터를 제공한다.
