===================
인증 처리 테스트
===================

TestAuthenticate
--------------

사용자 인증 성공 (test_authenticate_user_success)
""""""""""""""""""""""""""""""""""""""""""""
:시나리오:
    * 활성 상태의 이메일 사용자 생성
    * 올바른 비밀번호로 인증 시도

:검증 항목:
    * 인증 성공 (True 반환)
    * 사용자의 비밀번호 해시와 일치

잘못된 비밀번호 (test_authenticate_with_wrong_password)
""""""""""""""""""""""""""""""""""""""""""""""
:시나리오:
    * 활성 상태의 이메일 사용자 생성
    * 잘못된 비밀번호로 인증 시도

:검증 항목:
    * 인증 실패 (False 반환)
    * 비밀번호 해시가 일치하지 않음

유효하지 않은 사용자 (test_authenticate_with_invalid_user)
""""""""""""""""""""""""""""""""""""""""""""""""""
:시나리오:
    * None 사용자로 인증 시도
    * 비활성화된 사용자로 인증 시도

:검증 항목:
    * 인증 실패 (False 반환)
    * 사용자 검증 단계에서 실패

테스트 설계 원칙
--------------

책임 분리
^^^^^^^^
* 애플리케이션 계층의 인증 로직 검증
* 도메인 계층의 can_authenticate() 활용
* 인프라 계층의 비밀번호 검증 활용

테스트 격리
^^^^^^^^^
* fixture를 통한 테스트 데이터 관리
* 각 계층의 독립적인 테스트
* 의존성 주입을 통한 결합도 감소

보안 고려사항
^^^^^^^^^^
* 테스트용 비밀번호 안전하게 관리
* 해시 처리기의 낮은 라운드 수 사용
* 실제 인증 프로세스 시뮬레이션

구현 세부사항
-----------

의존성
^^^^^
.. code-block:: python

    from src.application.auth.authenticate import authenticate_user
    from src.domain.user.entities import User
    from src.application.ports.security import PasswordHasher

주요 검증 포인트
^^^^^^^^^^^^^
1. 사용자 유효성
    * None 체크
    * 인증 가능 상태 확인

2. 비밀번호 검증
    * 빈 비밀번호 처리
    * 해시 일치 여부 확인

3. 반환 값
    * 성공/실패 여부를 boolean으로 반환
    * 예외 발생 없이 처리 